diff --git a/dev-requirements.txt b/dev-requirements.txt
index 24825fbf..e987ba6c 100644
--- a/dev-requirements.txt
+++ b/dev-requirements.txt
@@ -1,7 +1,6 @@
 # setup
 pip >=21.0.0
-setuptools >=64.0.0  # required for being able to run editable installs
-versioningit >=2.0.0,<4  # required for being able to run editable installs
+setuptools >=54.0.0  # required for being able to run editable installs
 
 # tests
 pytest >=6.0.0
diff --git a/docs-requirements.txt b/docs-requirements.txt
index 54cbe42b..6cf201a9 100644
--- a/docs-requirements.txt
+++ b/docs-requirements.txt
@@ -1,6 +1,5 @@
 # setup
-setuptools >=64.0.0  # required for reading the version string when building from git
-versioningit >=2.0.0,<4  # required for reading the version string when building from git
+setuptools >=54.0.0  # required for reading the version string when building from git
 
 # build
 sphinx >=6.0.0,<8
diff --git a/pyproject.toml b/pyproject.toml
index 953032e6..6f03bec1 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -2,9 +2,6 @@
 requires = [
   "setuptools >=64",
   "wheel",
-  # The versioningit build-requirement gets removed from the source distribution,
-  # as the version string is already built into it (see the onbuild versioningit hook):
-  "versioningit >=2.0.0,<4",  # disabled in sdist
 ]
 # setuptools build-backend override
 # https://setuptools.pypa.io/en/stable/build_meta.html
@@ -93,28 +90,7 @@ streamlink = [
 ]
 
 
-# https://versioningit.readthedocs.io/en/stable/index.html
-[tool.versioningit]
-# Packagers: don't patch the `default-version` string while using the tarball built by GitHub from the tagged git commit!
-# Instead, use Streamlink's signed source distribution as package source, which has the correct version string built in.
-# This fallback `default-version` string is only used when not building from the sdist or a git repo with at least one tag.
-# See the versioningit comment at the very top of this file!
-default-version = "0.0.0+unknown"
-
-[tool.versioningit.vcs]
-method = "git"
-
-[tool.versioningit.format]
-distance = "{base_version}+{distance}.{vcs}{rev}"
-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
-distance-dirty = "{base_version}+{distance}.{vcs}{rev}.dirty"
-
-[tool.versioningit.next-version]
-method = "null"
-
-[tool.versioningit.onbuild]
-# When building the sdist or wheel, remove versioningit build-requirement and set the static version string
-method = { module = "build_backend.onbuild", value = "onbuild" }
+default-version = "6.0.0"
 
 
 # https://docs.pytest.org/en/latest/reference/customize.html#configuration
@@ -134,7 +110,6 @@ filterwarnings = [
 [tool.coverage.run]
 branch = true
 source = [
-  "build_backend",
   "src",
   "tests",
 ]
diff --git a/setup.py b/setup.py
index 452cf707..556762fb 100644
--- a/setup.py
+++ b/setup.py
@@ -73,18 +73,12 @@ data_files = [
 
 
 if __name__ == "__main__":
-    from setuptools import setup  # type: ignore[import]
-
-    try:
-        # versioningit is only required when building from git (see pyproject.toml)
-        from versioningit import get_cmdclasses
-    except ImportError:  # pragma: no cover
-        def get_cmdclasses():  # type: ignore
-            return {}
+    from setuptools import setup, find_packages  # type: ignore[import]
 
     setup(
-        cmdclass=get_cmdclasses(),
         entry_points=entry_points,
         data_files=data_files,
-        # version="",  # static version string template, uncommented and substituted by versioningit's onbuild hook
+        version="6.0.0",
+        packages=find_packages("src"),
+        package_dir={"": "src"},
     )
diff --git a/src/streamlink/_version.py b/src/streamlink/_version.py
index 36e20c11..2245da3c 100644
--- a/src/streamlink/_version.py
+++ b/src/streamlink/_version.py
@@ -2,14 +2,7 @@
 # and instead of trying to get the version string from git, a static version string will be set
 
 def _get_version() -> str:
-    """
-    Get the current version from git in "editable" installs
-    """
-    from pathlib import Path  # noqa: PLC0415
-    from versioningit import get_version  # noqa: PLC0415
-    import streamlink  # noqa: PLC0415
-
-    return get_version(project_dir=Path(streamlink.__file__).parents[2])
+    return "6.0.0"
 
 
 __version__ = _get_version()
