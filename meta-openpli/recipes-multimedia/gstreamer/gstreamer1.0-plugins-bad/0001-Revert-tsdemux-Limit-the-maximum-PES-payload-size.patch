From c2e7d2e39be4293b97aa05d518168f8da5700155 Mon Sep 17 00:00:00 2001
From: Betacentauri <betacentauri@arcor.de>
Date: Thu, 28 Nov 2019 18:17:03 +0100
Subject: [PATCH] Revert "tsdemux: Limit the maximum PES payload size"

This commit causes audio/video asynchrony on some streams.

Reverts commit eaf918df0366975c05003b4c2a98e077b0106483.

diff --git a/gst/mpegtsdemux/tsdemux.c b/gst/mpegtsdemux/tsdemux.c
index f27a624..8eb95d8 100644
--- a/gst/mpegtsdemux/tsdemux.c
+++ b/gst/mpegtsdemux/tsdemux.c
@@ -75,13 +75,6 @@
 /* latency in msecs */
 #define DEFAULT_LATENCY (700)
 
-/* Limit PES packet collection to a maximum of 32MB
- * which is more than large enough to support an H264 frame at
- * maximum profile/level/bitrate at 30fps or above.
- * PES bigger than this limit will be output in buffers of
- * up to this size */
-#define MAX_PES_PAYLOAD (32 * 1024 * 1024)
-
 GST_DEBUG_CATEGORY_STATIC (ts_demux_debug);
 #define GST_CAT_DEFAULT ts_demux_debug
 
@@ -2534,7 +2527,7 @@ gst_ts_demux_queue_data (GstTSDemux * demux, TSDemuxStream * stream,
       if (G_UNLIKELY (stream->current_size + size > stream->allocated_size)) {
         GST_LOG ("resizing buffer");
         do {
-          stream->allocated_size = MAX (8192, 2 * stream->allocated_size);
+          stream->allocated_size *= 2;
         } while (stream->current_size + size > stream->allocated_size);
         stream->data = g_realloc (stream->data, stream->allocated_size);
       }
@@ -3321,17 +3314,11 @@ gst_ts_demux_push_pending_data (GstTSDemux * demux, TSDemuxStream * stream,
   }
 
 beach:
-  /* Reset the PES payload collection, but don't clear the state,
-   * we might want to keep collecting this PES */
-  GST_LOG ("Cleared PES data. returning %s", gst_flow_get_name (res));
-  if (stream->expected_size) {
-    if (stream->current_size > stream->expected_size)
-      stream->expected_size = 0;
-    else
-      stream->expected_size -= stream->current_size;
-  }
+  /* Reset everything */
+  GST_LOG ("Resetting to EMPTY, returning %s", gst_flow_get_name (res));
+  stream->state = PENDING_PACKET_EMPTY;
   stream->data = NULL;
-  stream->allocated_size = 0;
+  stream->expected_size = 0;
   stream->current_size = 0;
 
   return res;
@@ -3348,26 +3335,18 @@ gst_ts_demux_handle_packet (GstTSDemux * demux, TSDemuxStream * stream,
       FLAGS_CONTINUITY_COUNTER (packet->scram_afc_cc), packet->payload);
 
   if (G_UNLIKELY (packet->payload_unit_start_indicator) &&
-      FLAGS_HAS_PAYLOAD (packet->scram_afc_cc)) {
+      FLAGS_HAS_PAYLOAD (packet->scram_afc_cc))
     /* Flush previous data */
     res = gst_ts_demux_push_pending_data (demux, stream, NULL);
-    if (res != GST_FLOW_REWINDING) {
-      /* Tell the data collecting to expect this header. We don't do this when
-       * rewinding since the states will have been resetted accordingly */
-      stream->state = PENDING_PACKET_HEADER;
-    }
-  }
 
   if (packet->payload && (res == GST_FLOW_OK || res == GST_FLOW_NOT_LINKED)
       && stream->pad) {
     gst_ts_demux_queue_data (demux, stream, packet);
     GST_LOG ("current_size:%d, expected_size:%d",
         stream->current_size, stream->expected_size);
-    /* Finally check if the data we queued completes a packet, or got too
-     * large and needs output now */
-    if ((stream->expected_size && stream->current_size >= stream->expected_size)
-        || (stream->current_size >= MAX_PES_PAYLOAD)) {
-      GST_LOG ("pushing packet of size %u", stream->current_size);
+    /* Finally check if the data we queued completes a packet */
+    if (stream->expected_size && stream->current_size == stream->expected_size) {
+      GST_LOG ("pushing complete packet");
       res = gst_ts_demux_push_pending_data (demux, stream, NULL);
     }
   }
